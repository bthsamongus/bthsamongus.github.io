!function(){Date.prototype.get12AMTime||(Date.prototype.get12AMTime=function(){let e=(this.toString()+"").split(" ");return e[4]="00:00:00",new Date(e.join(" ")).getTime()}),firebase.initializeApp({apiKey:"AIzaSyBQQPdSR_XQ8vW5ud0rKCkZqrNnrcC8jQs",authDomain:"bthsamongus.firebaseapp.com",databaseURL:"https://bthsamongus.firebaseio.com",projectId:"bthsamongus",storageBucket:"bthsamongus.appspot.com",messagingSenderId:"958186855973",appId:"1:958186855973:web:96ea662fa0b3464f0da9cc"});const e=firebase.database(),t=firebase.auth();t.onAuthStateChanged(a=>{for(const e of n)e.innerHTML="",e.style.display="none";a?function(){function a(e,t){const n=document.createElement("div");for(const t in e)n.setAttribute(t,e[t]);for(const e of t)n.appendChild(e);return n}n[1].innerHTML="",n[1].style.display="block";const o=[a({class:"meta"},[]),a({class:"logs"},[]),a({class:"entries"},[]),a({class:"members"},[])],s=document.createElement("section");s.setAttribute("class","nav"),n[1].appendChild(s);for(const e of o){const t=o.filter(t=>t!=e),n=document.createElement("span");n.innerHTML=e.classList[0],s.appendChild(n),n.onclick=(n=>{s.setAttribute("data-active",e.classList[0]),e.style.display="block";for(const e of t)e.style.display="none"}),0==o.indexOf(e)&&n.onclick()}for(const e of o)n[1].appendChild(e);(async function(n){const a=await e.ref("meta").once("value").then(e=>e.val()),o=await e.ref("dates").once("value").then(e=>Object.values(e.val()));for(const s of[function(){const n=document.createElement("section");n.setAttribute("class","account");const a=document.createElement("h1");a.innerHTML="Account";const s=document.createElement("div"),c=document.createElement("span");c.innerHTML="log out from database",c.onclick=(e=>{t.signOut()});const i=[c];if(o.filter(e=>e.date.toString()==(new Date).get12AMTime().toString()).length<1){const t=document.createElement("span");t.innerHTML="add today as club date",t.onclick=(t=>{!async function(){await e.ref("dates").push({date:(new Date).get12AMTime().toString()},e=>!e),await e.ref("meta/dates").update({updated:(new Date).getTime().toString()}).then(()=>!0).catch(e=>!1);window.location.reload()}()}),i.push(t)}for(const e of i)s.appendChild(e);for(const e of[a,s])n.appendChild(e);return n}(),function(){const e=document.createElement("section");e.setAttribute("class","update");const t=document.createElement("h1");t.innerHTML="Database Change Log";const n=function(){const e=document.createElement("table"),t=document.createElement("tr");t.innerHTML="\n                            <th>paths</th>\n                            <th>last updated</th>\n                            <th>last wiped</th>\n                        ",e.appendChild(t);for(const t in a){const n=a[t],o=document.createElement("tr");o.innerHTML=`\n                                <td>${t}</td>\n                                <td>${new Date(parseInt(n.updated)).toString().split(" ").slice(0,6).join(" ")}</td>\n                                <td>${new Date(parseInt(n.wiped)).toString().split(" ").slice(0,6).join(" ")}</td>\n                            `,e.appendChild(o)}return e}();for(const a of[t,n])e.appendChild(a);return e}(),function(){const e=document.createElement("section");e.setAttribute("class","dates");const t=document.createElement("h1");t.innerHTML="Logged Club Dates";const n=function(){const e=document.createElement("div");for(const t of o.sort((e,t)=>parseInt(t.date)-parseInt(e.date)).map(e=>new Date(parseInt(e.date)).toDateString())){const n=document.createElement("span");n.innerHTML=t,e.appendChild(n)}return e}();for(const a of[t,n])e.appendChild(a);return e}()])n.appendChild(s)})(o[0]),async function(t){const n=await e.ref("logs").once("value").then(e=>Object.values(e.val()).sort((e,t)=>parseInt(t.timestamp)-parseInt(e.timestamp))),a=document.createElement("h1");a.innerHTML="Logs";const o=document.createElement("table"),s=document.createElement("tr");s.innerHTML="\n                <th>time posted</th>\n                <th>club date</th>\n                <th>osis</th>\n            ",o.appendChild(s);for(const e in n){const t=n[e],a=document.createElement("tr");a.innerHTML=`\n                    <td>${new Date(parseInt(t.timestamp)).toString().split(" ").slice(0,6).join(" ")}</td>\n                    <td>${new Date(parseInt(t.date)).toDateString()}</td>\n                    <td>${t.osis}</td>\n                `,o.appendChild(a)}for(const e of[a,o])t.appendChild(e)}(o[1]),async function(t){const n=await e.ref("entries").once("value").then(e=>{const t=e.val();for(const e in t)t[e].key=e;return Object.values(t).sort((e,t)=>parseInt(t.timestamp)-parseInt(e.timestamp))}),a=document.createElement("h1");a.innerHTML="Entries";const o=document.createElement("table"),s=document.createElement("tr");s.innerHTML="\n                <th>time posted</th>\n                <th>club date</th>\n                <th>osis</th>\n                <th>first</th>\n                <th>last</th>\n                <th>email</th>\n                <th>sgo</th>\n                <th>verified</th>\n            ",o.appendChild(s);for(const t of n){const n=document.createElement("tr");n.innerHTML=`\n                    <td>${new Date(parseInt(t.timestamp)).toString().split(" ").slice(0,6).join(" ")}</td>\n                    <td>${new Date(parseInt(t.date)).toDateString()}</td>\n                    <td>${t.osis}</td>\n                    <td>${t.firstname}</td>\n                    <td>${t.lastname}</td>\n                    <td>${t.email}</td>\n                    <td>${t.sgo}</td>\n                `;const a=document.createElement("td");if("y"!=t.verified){const n=document.createElement("button");n.innerHTML="verify",n.onclick=(n=>{!async function(){const n=await e.ref(`entries/${t.key}`).update({verified:"y"}).then(()=>!0).catch(e=>!1);n?a.innerHTML="y":alert("verification failed. contact dev.")}()}),a.appendChild(n)}else a.innerHTML="y";n.appendChild(a),o.appendChild(n)}for(const e of[a,o])t.appendChild(e)}(o[2]),async function(e){e.innerHTML="\n                <p>This section is still currently in development. Please use ENTRIES as the offcial record for now.</p>\n                <p>The plan is to have all the info from ENTRIES to be aggregated periodically from a backend script using Node.js.</p>\n                <p>The aggregated data will be stored on the database and visually displayed in a member-by-member basis here.</p>\n            "}(o[3])}():function(){function e(e){const t=document.createElement("input");for(const n in e)t.setAttribute(n,e[n]);return t}function a(e,t){const n=document.createElement("div");for(const t in e)n.setAttribute(t,e[t]);for(const e of t)n.appendChild(e);return n}n[0].innerHTML="",n[0].style.display="block";const o=[e({type:"email",placeholder:"email",required:""}),e({type:"password",placeholder:"password",required:""}),e({type:"submit",value:"log in"})],s=document.createElement("h1");s.innerHTML="Execs Login";const c=document.createElement("p");c.innerHTML='To login, please enter in the correct email and password. If you are not an exec, return to the <a href="..">home page</a>.';const i=document.createElement("form");for(const e of o)i.appendChild(a({},[e]));n[0].appendChild(a({class:"content"},[s,c,i])),o[2].onclick=(e=>{function n(e,t,n){c.innerHTML=e,c.style.backgroundColor=t||"#ffd8d8",c.style.borderLeft=`4px solid ${n||"#ff7676"}`}return e.preventDefault(),o[0].checkValidity()?o[1].checkValidity()?void t.signInWithEmailAndPassword(o[0].value.trim(),o[1].value).catch(e=>{n(e.message)}):n("Please check your input for password."):n("Please check your input for email.")})}()});const n=[document.querySelector(".main .auth"),document.querySelector(".main .info")]}();